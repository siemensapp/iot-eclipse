#Set sources
FILE(GLOB SOURCES *.c)
LIST(APPEND MCL_SOURCES ${SOURCES})

#Remove unused sources
IF(NOT MCL_USE_LIBCURL)
	LIST(REMOVE_ITEM MCL_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/http_client_libcurl.c)
ENDIF()
IF(NOT MCL_USE_OPENSSL)
	LIST(REMOVE_ITEM MCL_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/security_libcrypto.c)
ENDIF()

SET(MCL_SOURCES ${MCL_SOURCES} CACHE INTERNAL "MCL_SOURCES" FORCE)

#Specify library as target
SET(PROJECT_LIBRARY_OUTPUT mc CACHE INTERNAL "PROJECT_LIBRARY_OUTPUT" FORCE)
ADD_LIBRARY(${PROJECT_LIBRARY_OUTPUT} ${MCL_USER_DEFINED_DYNAMIC_OR_STATIC} $<TARGET_OBJECTS:zf_log> $<TARGET_OBJECTS:cJSON> ${MCL_SOURCES})

#Create configuration file from template which contains preprocessor definition                       
CONFIGURE_FILE(config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/mcl_config.h)

#Set include directories
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_SOURCE_DIR})
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR})
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${MCL_CMAKE_ROOT_DIR}/include)
LIST(APPEND MCL_INCLUDE_DIRECTORIES ${MCL_CMAKE_ROOT_DIR}/lib)
IF(MCL_USE_OPENSSL)
	LIST(APPEND MCL_INCLUDE_DIRECTORIES ${OPENSSL_INCLUDE_DIR})
ENDIF()
SET(MCL_INCLUDE_DIRECTORIES ${MCL_INCLUDE_DIRECTORIES} CACHE INTERNAL "MCL_INCLUDE_DIRECTORIES" FORCE)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_LIBRARY_OUTPUT} PUBLIC ${MCL_INCLUDE_DIRECTORIES})

TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} ${MCL_LIBS})

#Set linker flag -lm for linking against the math lib (pow() floor())
IF(CMAKE_COMPILER_IS_GNUCC)
    TARGET_LINK_LIBRARIES(${PROJECT_LIBRARY_OUTPUT} m)
ENDIF()

#Set variables for distribution package destination
SET(PACKAGE_DESTINATION_BIN "bin")
SET(PACKAGE_DESTINATION_LIB "lib")

#Install MCL target
INSTALL(TARGETS mc
        RUNTIME DESTINATION ${PACKAGE_DESTINATION_BIN} COMPONENT ${BINARY_COMPONENT_NAME}
        LIBRARY DESTINATION ${PACKAGE_DESTINATION_LIB} COMPONENT ${BINARY_COMPONENT_NAME}
        ARCHIVE DESTINATION ${PACKAGE_DESTINATION_LIB} COMPONENT ${BINARY_COMPONENT_NAME})
